REPL with Scala interpreter
---------------------------
scala> val myList = new java.util.ArrayList[String]()
myList: java.util.ArrayList[String] = []

XML literals
------------
scala> val book = <book>
     | <title>Scala in Action</title>
     | <author>Nilanjan</author>
     | </book>
book: scala.xml.Elem =
<book>
<title>Scala in Action</title>
<author>Nilanjan</author>
</book>

scala> val message = "I didn't know xml could be so much fun"
message: String = I didn't know xml could be so much fun

scala> val code = "1"
code: String = 1

scala> val alert = <alert>
     | <message priority={code}>{message}</message>
     | <date>{new java.util.Date()}</date>
     | </alert>
alert: scala.xml.Elem =
<alert>
<message priority="1">I didn't know xml could be so much fun</message>
<date>Sat Jan 03 15:32:25 CET 2015</date>
</alert>

Defining variables
------------------
scala> var aa: Int = _
aa: Int = 0

scala> var test: Float = _
test: Float = 0.0

scala> var test: Boolean = _
test: Boolean = false

scala> var test: Char = _
test: Char = ?

scala> var test: Long = _
test: Long = 0

scala> var a = 1
a: Int = 1

scala> lazy val b = a + 1
b: Int = <lazy>

scala> a = 5
a: Int = 5

scala> b
res0: Int = 6

scala> val first :: rest = List(1, 2, 3)
first: Int = 1
rest: List[Int] = List(2, 3)

Defining functions
------------------
scala> def myFistFunction(): String = { "exciting times ahead" }
myFistFunction: ()String

scala> def myFistFunction() = { "exciting times ahead" }
myFistFunction: ()String

scala> myFistFunction()
res1: String = exciting times ahead

scala> def myFistFunction = "exciting times ahead"
myFistFunction: String

scala> myFistFunction
res2: String = exciting times ahead

scala> def max(a: Int, b: Int) = if(a > b) a else b
max: (a: Int, b: Int)Int

scala> max(5, 4)
res3: Int = 5

scala> max(5, 7)
res4: Int = 7

scala> def toList[A](value:A) = List(value)
toList: [A](value: A)List[A]

scala> toList(1)
res5: List[Int] = List(1)

scala> toList("Scala rocks")
res6: List[String] = List(Scala rocks)

Function literals
-----------------
scala> val evenNumbers = List(2, 4, 6, 8, 10)
evenNumbers: List[Int] = List(2, 4, 6, 8, 10)

scala> evenNumbers.foldLeft(0) { (a, b) => a + b }
res7: Int = 30

scala> evenNumbers.foldLeft(0) { _ + _ }
res8: Int = 30

Arrays 
------
scala> val array = new Array[String](3)
array: Array[String] = Array(null, null, null)

scala> array(0) = "This"

scala> array(1) = "is"

scala> array(2) = "mutable"

scala> array
res3: Array[String] = Array(This, is, mutable)

scala> array.foreach(println)
This
is
mutable

$ scala myfirstScript.scala my first script
my
first
script

Lists
-----
scala> val myList = List("This", "is", "immutable")
myList: List[String] = List(This, is, immutable)

scala> val oldList = List(1, 2)
oldList: List[Int] = List(1, 2)

scala> val newList = 3 :: oldList
newList: List[Int] = List(3, 1, 2)

scala> oldList
res0: List[Int] = List(1, 2)

scala> val newList = oldList :+ 3
newList: List[Int] = List(1, 2, 3)

scala> val myList = "This" :: "is" :: "immutable" :: Nil
myList: List[String] = List(This, is, immutable)

scala> val afterDelete = newList.filterNot(_ == 3)
afterDelete: List[Int] = List(1, 2)

if/else
-------
scala> val useDefault = false
useDefault: Boolean = false

scala> val configFile = if (useDefault) "custom.txt" else "default.txt"
configFile: String = default.txt

For-comprehensions
------------------
scala> var files = new java.io.File(".").listFiles
files: Array[java.io.File] = Array(./myfirstScript.scala, ./REPL_output.txt)

scala> for (file <- files) {
     |   val filename = file.getName
     |   if (filename.endsWith(".scala")) println(file)
     | }
./myfirstScript.scala

scala> for(
     |   file <- files;
     |   fileName = file.getName;
     |   if(fileName.endsWith(".scala"))
     | ) println (file)
./myfirstScript.scala

scala> val aList = List(1, 2, 3)
aList: List[Int] = List(1, 2, 3)

scala> val bList = List(4, 5, 6)
bList: List[Int] = List(4, 5, 6)

scala> for { a <- aList; b <- bList } println(a + b)
5
6
7
6
7
8
7
8
9

scala> for { a <- aList; b <- bList } yield a + b
res5: List[Int] = List(5, 6, 7, 6, 7, 8, 7, 8, 9)

scala> val result = for { a <- aList; b <- bList } yield a + b
result: List[Int] = List(5, 6, 7, 6, 7, 8, 7, 8, 9)

scala> for (r <- result) println(r)
5
6
7
6
7
8
7
8
9

scala> val xmlNode = <result>{result.mkString(",")}</result>
xmlNode: scala.xml.Elem = <result>5,6,7,6,7,8,7,8,9</result>

scala> for { a <- aList; b <- bList } yield { println(a + b) }
5
6
7
6
7
8
7
8
9
res7: List[Unit] = List((), (), (), (), (), (), (), (), ())

Pattern matching
----------------
$ scala Ordinal.scala 9
9th

scala> 2 match { case 1 => "One" }
scala.MatchError: 2 (of class java.lang.Integer)
  ... 33 elided

scala> :load printType.scala
Loading printType.scala...
printType: (obj: AnyRef)Unit

scala> printType("Hello")
This is string

scala> printType(List(1,2,3))
This is List

scala> printType(new Array[String](2))
This is Array

scala> printType(new java.util.Date())
This is date
