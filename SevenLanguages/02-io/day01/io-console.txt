Breaking the Ice
----------------
Io> "Hiho, Io!" print
Hiho, Io!==> Hiho, Io!

Io> Vehicle := Object clone
==>  Vehicle_0x313640:
  type             = "Vehicle"

Io> Vehicle description := "Something to take you places"
==> Something to take you places

Io> Vehicle description = "Something to take you far away"
==> Something to take you far away

Io> Vehicle nonexistingSlot = "This won't work"

  Exception: Slot nonexistingSlot not found. Must define slot using := operator before updating.
  ---------
  message 'updateSlot' in 'Command Line' on line 1

Io> Vehicle description
==> Something to take you far away

Io> Vehicle slotNames
==> list(type, description)

Io> Vehicle type
==> Vehicle

Io> Object type
==> Object

Objects, prototypes and inheritance
-----------------------------------
Io> Car := Vehicle clone
==>  Car_0x31a4b0:
  type             = "Car"

Io> Car slotNames
==> list(type)
Io> Car type
==> Car
Io> Car description
==> Something to take you far away

Io> ferrari := Car clone
==>  Car_0x24b930:

Io> ferrari slotNames
==> list()
Io> ferrari type
==> Car
Io> Ferrari := Car clone
==>  Ferrari_0x38c870:
  type             = "Ferrari"

Io> Ferrari type
==> Ferrari
Io> Ferrari slotNames
==> list(type)
Io> ferrari slotNames
==> list()

Methods
-------
Io> method("So, you've come for an argument." println)
==> method(
    "So, you've come for an argument." println
)
Io> method() type
==> Block

Io> Car drive := method("Vroom" println)
==> method(
    "Vroom" println
)
Io> ferrari drive
Vroom
==> Vroom
Io> ferrari getSlot("drive")
==> method(
    "Vroom" println
)
Io> ferrari proto
==>  Car_0x31a4b0:
  drive            = method(...)
  type             = "Car"

Io> Car proto
==>  Vehicle_0x313640:
  description      = "Something to take you far away"
  type             = "Vehicle"

Io> Lobby
==>  Object_0x2101b0:
  Car              = Car_0x31a4b0
  Ferrari          = Ferrari_0x38c870
  Lobby            = Object_0x2101b0
  Protos           = Object_0x20f990
  Vehicle          = Vehicle_0x313640
  _                = Object_0x2101b0
  exit             = method(...)
  ferrari          = Car_0x24b930
  forward          = method(...)
  set_             = method(...)

Lists and Maps
--------------
Io> toDos := list("findmycar", "findContinuumTransfunctioner")
==> list(findmycar, findContinuumTransfunctioner)
Io> toDos size
==> 2
Io> toDos append("Findapresent")
==> list(findmycar, findContinuumTransfunctioner, Findapresent)

Io> list(1,2,3,4)
==> list(1, 2, 3, 4)
Io> list(1,2,3,4) average
==> 2.5
Io> list(1,2,3,4) sum
==> 10
Io> list(1,2,3,4) at(1)
==> 2
Io> list(1,2,3) append(4)
==> list(1, 2, 3, 4)
Io> list(1,2,3) pop
==> 3
Io> list(1,2,3) prepend(0)
==> list(0, 1, 2, 3)
Io> list() isEmpty
==> true

Io> elvis := Map clone
==>  Map_0x2b40b0:
Io> elvis atPut("home", "Graceland")
==>  Map_0x2b40b0:

Io> elvis atPut("style", "rock and roll")
==>  Map_0x2b40b0:

Io> elvis asObject
==>  Object_0x521810:
  home             = "Graceland"
  style            = "rock and roll"

Io> elvis asList
==> list(list(home, Graceland), list(style, rock and roll))
Io> elvis keys
==> list(home, style)
Io> elvis size
==> 2
