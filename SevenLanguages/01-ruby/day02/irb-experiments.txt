Defining functions
------------------
2.1.3 :001 > def tell_the_truth
2.1.3 :002?>   true
2.1.3 :003?> end
 => :tell_the_truth 

Arrays
------
2.1.3 :004 > animals = ['lions', 'tigers', 'bears']
 => ["lions", "tigers", "bears"] 
2.1.3 :005 > puts animals
lions
tigers
bears
 => nil 
2.1.3 :006 > animals[0]
 => "lions" 
2.1.3 :007 > animals[1]
 => "tigers" 
2.1.3 :008 > animals[10]
 => nil 
2.1.3 :009 > animals[-1]
 => "bears" 
2.1.3 :010 > animals[-2]
 => "tigers" 
2.1.3 :011 > animals[0..1]
 => ["lions", "tigers"] 
2.1.3 :012 > (0..1).class
 => Range 
2.1.3 :013 > a[0]=0
NameError: undefined local variable or method `a' for main:Object
    from (irb):13
    from /Users/luhtonen/.rvm/rubies/ruby-2.1.3/bin/irb:11:in `<main>'
2.1.3 :014 > a=[]
 => [] 
2.1.3 :015 > [1].class
 => Array 
2.1.3 :016 > [1].methods.include?('[]')
 => false 
2.1.3 :021 > a[0] = 'zero'
 => "zero" 
2.1.3 :022 > a[1] = 1
 => 1 
2.1.3 :023 > a[2] = ['two', 'things']
 => ["two", "things"] 
2.1.3 :024 > a
 => ["zero", 1, ["two", "things"]]
2.1.3 :025 > a = [[1,2,3], [10,20,30], [40,50,60]]
 => [[1, 2, 3], [10, 20, 30], [40, 50, 60]] 
2.1.3 :026 > a[0][0]
 => 1 
2.1.3 :027 > a[1][2]
 => 30 
2.1.3 :029 > a = [1]
 => [1] 
2.1.3 :030 > a.push(1)
 => [1, 1] 
2.1.3 :031 > a = [1]
 => [1] 
2.1.3 :032 > a.push(2)
 => [1, 2] 
2.1.3 :033 > a.pop
 => 2 
2.1.3 :034 > a.pop
 => 1 

Hashes
------
>> >> numbers = {1 => 'one', 2 => 'two'}
=> {1=>"one", 2=>"two"}

?> >> numbers[1]
=> "one"

?> >> numbers[2]
=> "two"

?> >> stuff = {:array => [1,2,3], :string => 'Hi, mom!'}
=> {:array=>[1, 2, 3], :string=>"Hi, mom!"}

?> >> stuff[:string]
=> "Hi, mom!"

?> >> 'string'.object_id
=> 70203623077880

?> >> 'string'.object_id
=> 70203623078360

?> >> :string.object_id
=> 156808

?> >> :string.object_id
=> 156808

?> >> def tell_the_truth(options={})
?> >>   if options[:profession] == :lawyer
?> >>     'it could be believed that this is almost certainly not false.'
?> >>   else
?> >>     true
?> >>   end
?> >> end
=> :tell_the_truth

?> >> tell_the_truth
=> true

?> >> tell_the_truth :profession => :lawyer
=> "it could be believed that this is almost certainly not false."

Code Blocks and Yield
---------------------
?> >> 3.times{puts 'hi ya there, kiddo'}
hi ya there, kiddo
hi ya there, kiddo
hi ya there, kiddo
=> 3

?> >> animals = ['lions and', 'tigers and', 'bears', 'oh my']
=> ["lions and", "tigers and", "bears", "oh my"]

?> >> animals.each{|a| puts a}
lions and
tigers and
bears
oh my
=> ["lions and", "tigers and", "bears", "oh my"]

?> >> class Fixnum
?> >>   def my_times
?> >>     i = self
?> >>     while i > 0
?> >>       i = i - 1
?> >>       yield
?> >>     end
?> >>   end
?> >> end

?> >> 3.my_times{puts 'mangy moose'}
mangy moose
mangy moose
mangy moose
=> nil

?> >> def call_block(&block)
?> >>   block.call
?> >> end
=> :call_block

?> >> def pass_block(&block)
?> >>   call_block(&block)
?> >> end
=> :pass_block

?> >> pass_block{puts 'Hello, block'}
Hello, block
=> nil

Defining Classes
----------------
?> >> 4.class
=> Fixnum

?> >> 4.class.superclass
=> Integer

?> >> 4.class.superclass.superclass
=> Numeric

?> >> 4.class.superclass.superclass.superclass
=> Object
>>
?> >> 4.class.superclass.superclass.superclass.superclass
=> BasicObject

?> >> 4.class.superclass.superclass.superclass.superclass.superclass
=> nil

?> >> 4.class.class
=> Class

?> >> 4.class.class.superclass
=> Module

?> >> 4.class.class.superclass.superclass
=> Object

Modules, Enumerable and Sets
----------------------------
?> >> 'begin' <=> 'end'
=> -1

?> >> 'same' <=> 'same'
=> 0

?> >> a = [5, 3, 4, 1]
=> [5, 3, 4, 1]

?> >> a.sort
=> [1, 3, 4, 5]

?> >> a.any?{|i| i > 6}
=> false

?> >> a.any?{|i| i > 4}
=> true

?> >> a.all?{|i| i > 4}
=> false

?> >> a.all?{|i| i > 0}
=> true

?> >> a.collect { |i| i * 2 }
=> [10, 6, 8, 2]

?> >> a.select { |i| i % 2 == 0 } # even
=> [4]

?> >> a.select { |i| i % 2 == 1 } # odd
=> [5, 3, 1]

?> >> a.max
=> 5

?> >> a.member?(2)
=> false

?> >> a
=> [5, 3, 4, 1]

?> >> a.inject(0) {|sum, i| sum + i}
=> 13

?> >> a.inject {|sum, i| sum + i}
=> 13

?> >> a.inject {|product, i| product * i}
=> 60

?> >> a.inject(0) do |sum, i|
?> >>   puts "sum: #{sum} i: #{i} sum + i: #{sum + i}"
?> >>   sum + i
?> >> end
sum: 0 i: 5 sum + i: 5
sum: 5 i: 3 sum + i: 8
sum: 8 i: 4 sum + i: 12
sum: 12 i: 1 sum + i: 13
=> 13
